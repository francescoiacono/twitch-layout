@use "sass:map";
@use "variables" as *;

/**
 * Retrieves a specific shade of a color from the $colors map.
 *
 * @function palette
 * @param $color - The name of the color to retrieve.
 * @param $shade - The shade of the color to retrieve (default is 500).
 * @return - The color value corresponding to the specified color and shade.
 * @throws - If the specified color is not found in the $colors map.
 * @throws - If the specified shade is not found for the given color.
 */
@function palette($color, $shade: 500) {
  @if not map.has-key($colors, $color) {
    @error "Color `#{$color}` not found in $colors map.";
  }

  @if not map.has-key(map.get($colors, $color), $shade) {
    @error "Shade `#{$shade}` not found in color `#{$color}`.";
  }

  @return map.get(map.get($colors, $color), $shade);
}

/**
 * Generates a CSS gradient (linear or radial) based on the provided parameters.
 * 
 * @function create-gradient
 * @param $color1 - The first color in the gradient.
 * @param $color2 - The second color in the gradient.
 * @param [$type=linear] - The type of gradient to create ('linear' or 'radial'). Defaults to 'linear'.
 * @param [$direction=to right] - The direction of the gradient for linear gradients. Defaults to 'to right'.
 * @param [$color1-position=0%] - The position of the first color in the gradient. Defaults to '0%'.
 * @param [$color2-position=100%] - The position of the second color in the gradient. Defaults to '100%'.
 * 
 * @returns {String} - The generated CSS gradient.
 */
@function create-gradient(
  $color1,
  $color2,
  $type: linear,
  $direction: to right,
  $color1-position: 0%,
  $color2-position: 100%
) {
  @if $type == linear {
    @return linear-gradient(
      $direction,
      $color1 $color1-position,
      $color2 $color2-position
    );
  } @else if $type == radial {
    @return radial-gradient(
      circle at center,
      $color1 $color1-position,
      $color2 $color2-position
    );
  }

  @return linear-gradient($direction, $color1, $color2);
}

/**
 * Retrieves a specific z-index value from the $z-index map.
 *
 * @function z-index
 * @param $key - The key of the z-index value to retrieve.
 * @return - The z-index value corresponding to the specified key.
 * @throws - If the specified key is not found in the $z-index map.
/**
 * Retrieves a specific z-index value from the $z-index map.
 *
 * @function get-z-index
 * @param $key - The key of the z-index value to retrieve.
 * @return - The z-index value corresponding to the specified key.
 * @throws - If the specified key is not found in the $z-index map.
 */
@function get-z-index($key) {
  @if not map.has-key($z-index, $key) {
    @error "Z-index `#{$key}` not found in $z-index map.";
  }

  @return map.get($z-index, $key);
}
